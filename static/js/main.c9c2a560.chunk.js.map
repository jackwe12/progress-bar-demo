{"version":3,"sources":["components/ProgressBar/ProgressBar.js","components/BarSelect/BarSelect.js","components/ControlBtn/ControlBtn.js","App.js","serviceWorker.js","index.js"],"names":["Bar","barValue","limit","className","style","width","DropButton","current","setCurrent","bars","Dropdown","Toggle","variant","id","Menu","map","bar","index","Item","onClick","key","Btn","buttonValue","handleScore","Button","App","useState","setBar","buttons","setButtons","setLimit","useEffect","fetch","then","response","json","data","delta","changedValue","slice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iTAoCeA,G,MAjCH,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,SAGV,OACKA,EAJyB,EAAVC,MAMZ,yBAAKC,UAAU,OAEX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,aAAaF,EAA5B,KACA,yBAAKE,UAAU,cAAcC,MAAO,CAACC,MAAM,GAAD,OAAIJ,EAAJ,UAKlD,yBAAKE,UAAU,OAEX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,aAAaF,EAA5B,KACA,yBAAKE,UAAU,qBAAqBC,MAAO,CAACC,MAAM,GAAD,OAAIJ,EAAJ,Y,OCMtDK,G,MAvBG,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,WAAYC,EAAQ,EAARA,KAErC,OACI,8BACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAASC,OAAV,CAAiBC,QAAQ,UAAUC,GAAG,kBAAtC,aACeN,EAAU,GAGzB,kBAACG,EAAA,EAASI,KAAV,KACKL,EAAKM,KAAI,SAACC,EAAIC,GAAL,OACN,kBAACP,EAAA,EAASQ,KAAV,CAAgBC,QAAS,kBAAIX,EAAWS,IAAQG,IAAKH,GAArD,eAAyEA,EAAQ,W,OCO1FI,G,MAjBJ,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,YAAahB,EAAW,EAAXA,QACnC,OAEKe,EAAc,EAEf,8BACE,kBAACE,EAAA,EAAD,CAAQZ,QAAQ,YAAYO,QAAS,kBAAII,EAAYhB,EAASe,KAA9D,IAA8EA,IAIhF,8BACE,kBAACE,EAAA,EAAD,CAAQZ,QAAQ,YAAYO,QAAS,kBAAII,EAAYhB,EAASe,KAAeA,M,MCqExEG,MAhFf,WAAgB,IAAD,EACSC,mBAAS,IADlB,mBACNV,EADM,KACDW,EADC,OAEiBD,mBAAS,IAF1B,mBAENE,EAFM,KAEGC,EAFH,OAGaH,mBAAS,GAHtB,mBAGNxB,EAHM,KAGC4B,EAHD,OAIiBJ,mBAAS,GAJ1B,mBAINnB,EAJM,KAIGC,EAJH,KAMbuB,qBAAU,WACRC,MAAM,qCACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GACJT,EAAOS,EAAK3B,MACZoB,EAAWO,EAAKR,SAChBE,EAASM,EAAKlC,YAEf,IAEH,IAAMqB,EAAc,SAACN,EAAOoB,GAE1B,IAAIC,EAAetB,EAAIC,GAASoB,EAE5BC,EAAe,GAAKD,EAAQ,EAE9BV,EAAO,GAAD,mBAAKX,EAAIuB,MAAM,EAAGtB,IAAlB,CAA0BD,EAAIC,GAASoB,GAAvC,YAAiDrB,EAAIuB,MAAMtB,EAAM,MAGhEqB,EAAe,GAEtBX,EAAO,GAAD,mBAAKX,EAAIuB,MAAM,EAAGtB,IAAlB,CAA0B,GAA1B,YAAgCD,EAAIuB,MAAMtB,EAAM,OAM1D,OACE,oCACE,wBAAId,UAAU,gBAAd,sBACA,wBAAIA,UAAU,gBAAd,UAAqCD,GACrC,yBAAKC,UAAU,eACZa,EAAID,KAAI,SAACd,EAAUgB,GACpB,OACE,kBAAC,EAAD,CACEhB,SAAYA,EACZC,MAASA,EACTkB,IAAOH,QAMb,yBAAKd,UAAU,mBACb,yBAAKA,UAAU,0BACX,yBAAKA,UAAU,sBACf,kBAAC,EAAD,CACEI,QAAWA,EACXC,WAAcA,EACdC,KAAQO,KAGZ,yBAAKb,UAAU,uBACZyB,EAAQb,KAAI,SAACO,EAAaL,GAC3B,OACE,kBAAC,EAAD,CACEK,YAAeA,EACfL,MAASA,EACTM,YAAeA,EACfhB,QAAWA,EACXa,IAAKH,YC1DDuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCfNC,IAASC,OACL,kBAAC,EAAD,MACCC,SAASC,eAAe,SD8HvB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c9c2a560.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ProgressBar.scss';\nconst Bar = ({barValue, limit}) =>{\n\n\n    return (\n        (barValue < limit)\n        ?(\n            <div className='bar'>\n\n                <div className='progress'>\n                    <div className='bar-value'>{barValue}%</div>\n                    <div className='progressBar' style={{width:`${barValue}%`}}></div>\n                </div>\n            </div>\n        )\n        :(\n            <div className='bar'>\n\n                <div className='progress'>\n                    <div className='bar-value'>{barValue}%</div>\n                    <div className='progressBar danger' style={{width:`${barValue}%`}}></div>\n                </div>\n            </div>\n        )\n    );\n\n}\n\nBar.propTypes = {\n    barValue: PropTypes.number.isRequired,\n    limit: PropTypes.number.isRequired\n}\n\n\nexport default Bar;","import React from 'react';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport PropTypes from 'prop-types';\nimport './BarSelect.scss';\n\nconst DropButton =({current, setCurrent, bars})=>{\n\n    return(\n        <span >\n            <Dropdown>\n                <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">  \n                    # Progress{current + 1}               \n                </Dropdown.Toggle>\n           \n                <Dropdown.Menu>\n                    {bars.map((bar,index)=>   \n                        <Dropdown.Item  onClick={()=>setCurrent(index)} key={index}> # Progress {index + 1}</Dropdown.Item> \n                    \n                    )}\n                </Dropdown.Menu>\n                </Dropdown>\n                \n\n\n        </span>\n    );\n}\n\nexport default DropButton;\n\nDropButton.propTypes = {\n    setCurrent: PropTypes.func,\n    bars: PropTypes.array,\n    current: PropTypes.number,\n\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport PropTypes from 'prop-types';\nimport './ControlBtn.scss';\n\n\nconst Btn =({buttonValue, handleScore, current})=>{\n    return(\n      \n        (buttonValue > 0)\n        ?(\n        <span >\n          <Button variant=\"secondary\" onClick={()=>handleScore(current, buttonValue)}>+{buttonValue}</Button>\n        </span>\n        )\n        :(\n        <span >\n          <Button variant=\"secondary\" onClick={()=>handleScore(current, buttonValue)}>{buttonValue}</Button>\n        </span>\n        )\n      \n    );\n}\nexport default Btn;\n\n\n\nBtn.propTypes = {\n    buttonValue: PropTypes.number,\n    handleScore: PropTypes.func,\n    current: PropTypes.number,\n\n}\n","import React, {useState, useEffect} from 'react';\nimport Bar from './components/ProgressBar/ProgressBar';\nimport BarSelect from './components/BarSelect/BarSelect';\nimport ControlBtn from './components/ControlBtn/ControlBtn';\nimport './App.scss';\n\nfunction App() {\n  const [bar, setBar] = useState([]);\n  const [buttons, setButtons] = useState([]);\n  const [limit, setLimit] = useState(0);\n  const [current, setCurrent] = useState(0); \n\n  useEffect(()=>{\n    fetch(`https://pb-api.herokuapp.com/bars`)\n    .then(response=>response.json())    \n    .then(data=>{                \n      setBar(data.bars);\n      setButtons(data.buttons);\n      setLimit(data.limit);\n      })\n  }, [])\n\n  const handleScore = (index, delta) => {\n    \n    let changedValue = bar[index] + delta;\n\n    if (changedValue > 0 || delta > 0)   \n    {\n      setBar([...bar.slice(0, index), bar[index] + delta, ...bar.slice(index+1)])\n    }\n\n    else if (changedValue < 0 )\n    {\n      setBar([...bar.slice(0, index), 0, ...bar.slice(index+1)])\n    }\n\n\n  }   \n\n  return (\n    <>\n      <h1 className='title center'>Progress Bars Demo</h1>\n      <h2 className='limit center'>Limit: {limit}</h2>\n      <div className=\"bar-section\">\n        {bar.map((barValue, index)=>{\n        return(\n          <Bar\n            barValue = {barValue}\n            limit = {limit}\n            key = {index}\n          />\n        )\n        })}\n\n      </div>\n      <div className='control-section'>\n        <div className='control-section-inside'>\n            <div className='bar-select-button '>\n            <BarSelect\n              current = {current}\n              setCurrent = {setCurrent}\n              bars = {bar}\n            /> \n          </div>\n          <div className='controlBtn-section '>\n            {buttons.map((buttonValue, index)=>{\n            return(\n              <ControlBtn\n                buttonValue = {buttonValue}\n                index = {index}\n                handleScore = {handleScore}\n                current = {current}\n                key={index}\n              />\n            )\n\n            })}\n          </div>\n        </div>   \n      </div>\n\n\n    </>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n     document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}